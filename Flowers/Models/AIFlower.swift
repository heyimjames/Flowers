import Foundation
import SwiftUI

struct AIFlower: Identifiable, Codable {
    let id: UUID
    let name: String
    let descriptor: String
    let imageData: Data?
    let generatedDate: Date
    var isFavorite: Bool
    
    // Detailed information about the flower
    var meaning: String?
    var properties: String?
    var origins: String?
    var detailedDescription: String?
    var continent: Continent?
    var discoveryDate: Date? // When the user "discovered" this flower
    
    init(id: UUID = UUID(), 
         name: String, 
         descriptor: String, 
         imageData: Data? = nil, 
         generatedDate: Date = Date(), 
         isFavorite: Bool = false,
         meaning: String? = nil,
         properties: String? = nil,
         origins: String? = nil,
         detailedDescription: String? = nil,
         continent: Continent? = nil,
         discoveryDate: Date? = nil) {
        self.id = id
        self.name = name
        self.descriptor = descriptor
        self.imageData = imageData
        self.generatedDate = generatedDate
        self.isFavorite = isFavorite
        self.meaning = meaning
        self.properties = properties
        self.origins = origins
        self.detailedDescription = detailedDescription
        self.continent = continent
        self.discoveryDate = discoveryDate
    }
    
    // Sample flower for preview/placeholder
    static var sample: AIFlower {
        AIFlower(
            name: "Moonlight Rose",
            descriptor: "moonlight rose with silver petals",
            imageData: nil,
            isFavorite: false
        )
    }
}

// Continent enum for tracking flower origins
enum Continent: String, Codable, CaseIterable {
    case northAmerica = "North America"
    case southAmerica = "South America"
    case europe = "Europe"
    case africa = "Africa"
    case asia = "Asia"
    case oceania = "Oceania"
    case antarctica = "Antarctica"
}

// Flower details generated by AI
struct FlowerDetails: Codable {
    let meaning: String
    let properties: String
    let origins: String
    let detailedDescription: String
    let continent: String
}

// Flower name generator
struct FlowerNameGenerator {
    static let adjectives = ["Crystal", "Moonlight", "Stardust", "Aurora", "Velvet", "Mystic", "Ethereal", "Celestial"]
    static let nouns = ["Rose", "Lily", "Orchid", "Dahlia", "Iris", "Blossom", "Bloom", "Petal"]
    
    static func generateName() -> String {
        let adjective = adjectives.randomElement() ?? "Beautiful"
        let noun = nouns.randomElement() ?? "Flower"
        return "\(adjective) \(noun)"
    }
    
    static func generateDescriptor() -> String {
        let adjective = adjectives.randomElement()?.lowercased() ?? "beautiful"
        let noun = nouns.randomElement()?.lowercased() ?? "flower"
        return "\(adjective) \(noun) with ethereal petals"
    }
}

// Flower descriptor constants
struct FlowerDescriptors {
    static let descriptors = [
        "delicate alpine rose with morning dew",
        "tropical orchid with vibrant petals",
        "wildflower lily from mountain meadows",
        "sunset dahlia with gradient colors",
        "deep purple iris with velvety texture",
        "cherry blossom with delicate pink petals",
        "garden bloom with layered petals",
        "meadow flower with soft pastels",
        "blue lotus floating on water",
        "golden sunflower facing the sun",
        "winter rose with frost-kissed edges",
        "desert lily with resilient petals",
        "white jasmine with sweet fragrance",
        "violet with deep purple hues",
        "rainforest orchid with exotic patterns",
        "coastal wildflower with salt-spray resilience",
        "spring tulip with perfect symmetry",
        "climbing vine flower with delicate tendrils",
        "pond lily with floating leaves",
        "mountain wildflower with alpine colors"
    ]
    
    static func random() -> String {
        descriptors.randomElement() ?? descriptors[0]
    }
} 